<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
		
<!-- Spring boot에서는 직접적으로 sqlSessionTemplate 객체를 다루지 않으므로, namespace를 FQCN으로 명시해줘야 함. -->
<!-- <mapper namespace="ProductMapper">  -->
<mapper namespace="com.model2.mvc.service.product.ProductDao">

	<resultMap id="productSelectMap" type="com.model2.mvc.service.domain.Product">
		<result property="prodNo" column="prod_no" jdbcType="INTEGER" />
		<result property="prodName" column="prod_name" jdbcType="VARCHAR" />
		<result property="prodDetail" column="prod_detail" jdbcType="VARCHAR" />
		<result property="manuDate" column="manufacture_day" jdbcType="VARCHAR" />
		<result property="price" column="price" jdbcType="INTEGER" />
		<result property="fileName" column="image_file" jdbcType="VARCHAR" />
		<result property="regDate" column="reg_date" jdbcType="DATE" />
		<!-- jdbcType을 NUMBER로 하면 error 난다... -->
		<result property="inventory" column="inventory" jdbcType="NUMERIC" />
		<!-- Join table의 결과값이더라도 미리 매핑이 가능함! -->
		<result property="proTranCode" column="tran_status_code" jdbcType="VARCHAR" />
		
		<result property="images.img1" column="img1" jdbcType="VARCHAR"></result>
		<result property="images.img2" column="img2" jdbcType="VARCHAR"></result>
		<result property="images.img3" column="img3" jdbcType="VARCHAR"></result>
	</resultMap>
	
	
	<!-- INSERT -->
	<insert id="insertProduct" parameterType="product">
		INSERT INTO
		product (prod_no, prod_name, prod_detail, manufacture_day, price, image_file, reg_date, inventory, img1, img2, img3)
		<!-- NOT NULL 제약조건을 걸어두지 않은 것들은, 상이한 타입에 대한 null 입력을 위한 JDBC setNull 메소드를 적용하기 위해서 jdbcType 설정해줘야 함. -->
		VALUES (seq_product_prod_no.nextval, #{prodName}, #{prodDetail:VARCHAR}, #{manuDate, jdbcType=VARCHAR}, #{price:INTEGER}, 
			#{fileName:VARCHAR}, SYSDATE, #{inventory:INTEGER}, #{images.img1:VARCHAR}, #{images.img2:VARCHAR}, #{images.img3:VARCHAR})
	</insert>

	<!-- SELECT ONE -->
	<!-- 상품 로직에서는 tran_code를 알 필요가 없다. transaction에게 해당 로직을 위임함. -->
	<select id="findProduct" parameterType="integer" resultMap="productSelectMap">
		SELECT 
		p.*, i.img1, i.img2, i.img3
		FROM product p, images i
		WHERE  p.prod_no = #{value}
			AND p.prod_no = i.prod_no 
	</select>
		
	<!-- SELECT LIST -->
	<!-- sql 태그는 mybatis에 종속적이므로, 코드 중복 발생하더라도 풀어헤쳐서 작성하는 것이 더 좋다고 판단함. -->
	<select id="getProductList" parameterType="search" resultMap="productSelectMap">

		SELECT
		*
		FROM (
						SELECT
						ROWNUM AS n, origin.*
						FROM (
							SELECT
							<!-- 중복되는 column명이 있으면 '열의 정의가 애매합니다' 오류 발생 -->
							p.*, t.tran_status_code, i.img1, i.img2, i.img3
							FROM product p, transaction t, images i
							<where>
								<!-- outer join은 하나의 table만 대상으로 수행할 수 있다. -->
								p.prod_no = t.prod_no(+)
								AND p.prod_no = i.prod_no(+)	
								<if test="priceMin == null and priceMax != null">AND p.price &lt;= #{priceMax}</if>
								<if test="priceMin != null and priceMax == null">AND p.price &gt;= #{priceMin}</if>
								<if test="priceMin != null and priceMax != null">AND p.price BETWEEN #{priceMin} AND #{priceMax}</if>
								<if test="searchKeyword != null">AND p.prod_name LIKE '%'||#{searchKeyword}||'%'</if>
								<if test="priceDESC != null">
									<if test="priceDESC == 0">ORDER BY p.price ASC</if>
									<if test="priceDESC == 1">ORDER BY p.price DESC</if>
								</if><if test="priceDESC == null">
									ORDER BY p.prod_no DESC
								</if>
							</where>
						) origin
						WHERE ROWNUM &lt;= #{endRowNum}
					)
		WHERE n BETWEEN #{startRowNum} AND #{endRowNum}
	</select>
	
	<!--  SELECT LIST -->
	<select id="getTotalCount" parameterType="search" resultType="int">
		SELECT
		COUNT(*)
		FROM (
			SELECT
			p.*, t.tran_status_code, i.*
			FROM product p, transaction t, images i
			<where>
				p.prod_no = t.prod_no(+) 
				AND p.prod_no = i.prod_no
				AND t.prod_no = i.prod_no
				<if test="priceMin == null and priceMax != null">AND p.price &lt;= #{priceMax}</if>
				<if test="priceMin != null and priceMax == null">AND p.price &gt;= #{priceMin}</if>
				<if test="priceMin != null and priceMax != null">AND p.price BETWEEN #{priceMin} AND #{priceMax}</if>
				<if test="searchKeyword != null">AND p.prod_name LIKE '%'||#{searchKeyword}||'%'</if>
				<!-- 개수만 세면 되니 정렬은 불필요 -->
			</where>
		) origin
	</select>
	
	<!-- UPDATE -->
	<update id="updateProduct" parameterType="product">
		UPDATE product p, images i
		<set>
			<if test="prodDetail != null">p.prod_detail=#{prodDetail}, </if>
			<if test="manuDate != null">p.manufacture_day=#{manuDate}, </if>
			<if test="price != null">p.price=#{price}, </if>
			<if test="fileName != null">p.image_file=#{fileName}, </if>
			<if test="fileName != null">i.img1 = #{images.img1}, </if>
			<if test="fileName != null">i.img2 = #{images.img2}, </if>
			<if test="fileName != null">i.img3 = #{images.img3}, </if>
			p.inventory = #{inventory},
			p.prod_name=#{prodName}
		</set>
		WHERE p.prod_no=#{prodNo}
			AND p.prod_no = i.prod_no
	</update>
	
	<update id="decreaseInventory" parameterType="product">
		UPDATE product
		SET inventory=#{inventory}
		WHERE prod_no=#{prodNo}
	</update>
	
	<!-- DELETE -->
	<delete id="deleteProduct" parameterType="int">
		DELETE FROM product
		WHERE prod_no=#{prodNo} 
	</delete>
	
	<!-- autocomplete 사용 검색 시 중복 제거... page 정보 불필요. -->
	<select id="getProductListAutoComplete" parameterType="search" resultMap="productSelectMap">
		SELECT
		ROWNUM, origin.prod_name as prod_name
		FROM	(	SELECT
				DISTINCT prod_name
				FROM product
				WHERE
					prod_name LIKE '%'||#{searchKeyword}||'%' 
				ORDER BY LENGTH(prod_name) ) origin
		WHERE ROWNUM BETWEEN 1 AND 5
	</select>
	
</mapper>